{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Workshop Title \u00b6 Welcome to our workshop! In this workshop we'll be using foo to accomplish bar. The goals of this workshop are: Goals! Have fun! About this workshop \u00b6 The introductory page of the workshop is broken down into the following sections: Agenda Compatibility Technology Used Credits Agenda \u00b6 Lab 1: IaC and Config Management Exercise to do the thing Compatibility \u00b6 This workshop has been tested on the following platforms: osName : version X, version Y Technology Used \u00b6 Brief Description Credits \u00b6 Full Name","title":"About the workshop"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#workshop-title","text":"Welcome to our workshop! In this workshop we'll be using foo to accomplish bar. The goals of this workshop are: Goals! Have fun!","title":"Workshop Title"},{"location":"#about-this-workshop","text":"The introductory page of the workshop is broken down into the following sections: Agenda Compatibility Technology Used Credits","title":"About this workshop"},{"location":"#agenda","text":"Lab 1: IaC and Config Management Exercise to do the thing","title":"Agenda"},{"location":"#compatibility","text":"This workshop has been tested on the following platforms: osName : version X, version Y","title":"Compatibility"},{"location":"#technology-used","text":"Brief Description","title":"Technology Used"},{"location":"#credits","text":"Full Name","title":"Credits"},{"location":"IaC-and-config-management/","text":"Cloud Native Infrastructure as Code and Configuration Management \u00b6 In this lab we will be exploring the concepts of Infrastructure as code and configuration management in the scope of cloud native development. Traditionally, infrastructure as code (IaC) mainly referred to provisioning virtual machines across datacenters and cloud providers, however, as we move to a more cloud native strategy involving container orchestration on public clouds, this provisioning process looks different. With the popularity of hosted kubernetes and OpenShift offerings on public clouds, it is easier than ever to provision a platform on which to deploy contianerized applications. In this lab we will walk through the automated provisioning of an OpenShift cluster on IBM Cloud, configuring that cluster with common development tooling, and then finally deploying an application to that cluster. We will be utilizing Ansible to provision and configure our environment as well as the open source project AWX to manage the Ansible playbook runs. Prerequisites \u00b6 IBM Cloud Account: Create a free account here Getting access to the workshop environment \u00b6 In this workshop we will be giving you an OpenShift cluster to work on. To access the workshop cluster, follow these steps: Navigate to https://ansible-lab.mybluemix.net and enter you IBM ID (email used to create IBM Cloud account) and the lab password of oslab . After requesting a cluster you should be given a link to take you to the workshop cluster in an IBM Cloud Account. Click on the link. Remember what number cluster you were assigned, we will need this later. We will be using a web terminal environment so that participants can have access to the necessary cli tools without having to install anything. To access this environment, find your assigned number. This should be in the cluster name that you were assigned earlier when you requested a workshop environment. The url to access the terminal environment follows this structure: base url + \"/term\" + assigned number without the leading 0 s The base url for everybody will be: https://oliver-citi-terms-2bef1f4b4097001da9502000c44fc2b2-0000.us-south.containers.appdomain.cloud For example, if I was assigned cluster-030 my url would be https://oliver-citi-terms-2bef1f4b4097001da9502000c44fc2b2-0000.us-south.containers.appdomain.cloud/term30 1. Setup the environment \u00b6 Authenticate to your OpenShift cluster \u00b6 Now let's authenticate with our OpenShift cluster. Navigate to your openshift Cluster in IBM Cloud using the link given to you after requesting a cluster. Click on the cluster listed to be taken to the cluster overview page. Click on the OpenShift web console button to launch the console. From the console, click on the username at the top right of the page and select Copy Login Command Then, click on Display token Next, copy everything in the first box that contains the oc login command. Switch back to your terminal environment and paste in your oc login command. You should now be authenticated and targeting your OpenShift cluster. Get an API key from IBM Cloud \u00b6 Now we need to get an IBM Cloud api key to access our account from the terminal. Go back to your browser tab that is on IBM Cloud. In the top right of the page, select the Manage dropdown, and select Access (IAM) Then select API keys on the left of the page. Click on the Create an IBM Cloud API key button. Name the key awx or whatever you wish. Click create . Then, click on the Copy button to copy the new key. Paste this key in a temporary doc for now or save it in a key manager. We will use this later. It is important that you verify that you have the key somewhere else because once you close the window with the api key, you cannot retrieve it later. If you lose your key you will need to come back and create another one. Switch back to your terminal environment. In your terminal enviroment, create an environment variable to hold your api key export IC_API_KEY = api key here Press enter. This will be used by our ansible playbook. Cloning the repo \u00b6 In the terminal environment, run the following commands: cd ~ git clone https://github.com/odrodrig/ansible-playbooks.git cd ansible-playbooks/playbooks 2. Running Ansible Playbooks \u00b6 Now that we are in our terminal environment, let's try running some simple playbooks. Playbooks allow users to script out tasks to be automated. You can run them by calling the ansible-playbook tool. Run the ansible playbook helloWorld by running the following command: ansible-playbook helloWorld.yml -v 3. Installing AWX \u00b6 From your terminal, run the following commands to install the AWX operator replacing cluster name here with the cluster name that you were assigned: echo \"cluster_name: cluster name here\" > vars.yml ansible-playbook installAWX.yml -v This playbook will do a few things: Get our cluster information from IBM Cloud Authenticate to our cluster using an API key from IBM Cloud Install the AWX operator Create a new project called \"awx\" Create an instance of AWX in our awx project 4. Configuring AWX \u00b6 Now that we have AWX installed, let's configure it to manage the running of our playbooks. Accessing AWX \u00b6 First we need to get our admin password to log into AWX. From your terminal, run the following commands: oc project awx oc get secret awx-admin-password -o jsonpath = \"{.data.password}\" | base64 --decode The password will be output but unfortunately the terminal prompt gets in the way. Copy the password up until the word root as seen below. Next, go back to your OpenShift console, click on Networking on the left side of the page to expand the menu and select Routes Then select the link under the Location column for the awx route. You will then be taken to your AWX login page. The credentials are as follows: username: admin password: { what you copied earlier } Click login to be taken to your AWX dashboard. Adding a project \u00b6 The first thing we need to do now is import our playbooks into our AWX environment. We can do this by creating a Project and pointing it to a git repository. Navigate to the Projects tab on the left side of the page. Then, click on the blue Add button. Name it ansible-playbooks or whatever you like, and for the Source Control Credential Type dropdown, select Git . In Source Control URL enter the following repo: https://github.com/odrodrig/ansible-playbooks Lastly, select the checkbox labeled 'Update Revision on Launch` Your project should look like the image below. Click Save Configuring Job Templates and Workflow Job Templates \u00b6 Now that we have imported our playbooks, we need to create job templates for each playbook we want to run. On the left side of the page, select the tab for Templates . Click on Add and select Add job template Configure the template with the values below. For the Inventory and Project fields you will need to click on the magnifying glass to select values.: Name: Create Cluster Inventory: Demo Inventory Project: ansible-playbooks (or whatever you named your project) Playbook: playbooks/create.yml Click Save Create another job template just as you did before with the following values: Name: Install OpenShift GitOps Inventory: Demo Inventory Project: ansible-playbooks Playbook: playbooks/installOpenShiftGitOps.yml Click Save Create one more job template just like before with the following values: Name: Install Compliance Operator Inventory: Demo Inventory Project: ansible-playbooks Playbook: playbooks/installComplianceOperator.yml Click Save Each job template corresponds to a playbook that does one task. If we want to combine multiple jobs into one process, we will need a workflow job template. The workflow that we will be building will create a cluster, install OpenShift GitOps, and lastly install the Compliance Operator. From the Templates menu, click on Add then select Add workflow template Name the workflow template Provision dev environment Then, in the Variables section, paste in the variables below. Be sure to replace {your cluster name here} with your actual cluster name. --- cluster_name : \"{your cluster name here}\" # The variables below are only used if you will be creating a cluster datacenter : \"\" hardware : \"\" kube_version : \"\" public_vlan_id : \"\" private_vlan_id : \"\" default_worker_ppol_size : \"\" entitlement : \"\" Click Save You will then be taken to the workflow visualizer tool that allows us to string together job templates as part of a workflow. Click on the green start button. In the new Add Node window that appears select the Create Cluster job template. Click Save. Now you should see your workflow with one node connected to the Start node. Select the Create Cluster node and click on the plus (+) sign to add a new node. Select the On Success box and click next. Then select the Install OpenShift GitOps job template and click Save . Let's add one more node. Select the Install OpenShift GitOps node and click on the plus (+) sign. Select the On Success box and click next. Then select the Install Compliance Operator job template and click Save . Your workflow should look like the image below: Click on Save at the top right of the workflow visualizer page. Adding a custom container group \u00b6 In our AWX instance, each job run will run in a separate container on our cluster. To configure this we need to create whats known as a Container Group . When we create our container group we will specify what image we want to use for our job runs. Click on the Instance Groups tab on the left side of the page. Then click on the existing container group called tower and click on the Edit button. Select the checkbox under Options labeled Customize pod specification . In the custom pod spec field, overwrite what's there and paste in the following but do not save yet : apiVersion : v1 kind : Pod metadata : namespace : awx spec : containers : - image : docker.io/odrodrig/ibmcloud-ee:0.3 name : worker env : - name : IC_API_KEY value : \"xxx\" args : - ansible-runner - worker In the custom pod spec that was just pasted in, add your IBM Cloud api key to the value property of the IC_API_Key env variable replacing the xxxx . Click Save 5. Running Jobs on AWX \u00b6 Now that our instance of AWX is configured, let's start running these playbooks. In this section we will explore two different ways to run our jobs. Manually running a Job \u00b6 Click on the Templates tab on the left of the page. Find the job template called Install Compliance Operator and click on it. Click on the Edit button. In the job template scroll down to the Variables section and paste the following line in: cluster_name: \"cluster-name\" Replace cluster-name with the cluster name that you were assigned. Scroll down and click Save Now, click on the Launch button to launch a job utilizing this job template. You should now be taken to the output page of the job that we just launched. Wait here until the job completes. While we can launch our jobs and workflow jobs manually from AWX, it would be better if we could set it up so that the jobs could be triggered without needing a human to log into AWX and click the launch button. Launching a job via API \u00b6 One of the benefits of using AWX/Ansible Tower is the ability to launch jobs via API request. This allows you to integrate your workflow runs into other processes. For example, a self serve form to request access to a new OpenShift development environment could trigger a workflow run in AWX. Click on Templates on the left side of the page to go back to the templates page. Select the Provision dev environment workflow job template Go to the address bar of your browser and go to the very end of the address. Look for the number just before /details . This is the workflow job template id and is needed to launch the job from the API. For example, in the partial address below, my workflow job template number is 21. Remember your number. ...us-south.containers.appdomain.cloud/#/templates/workflow_job_template/21/details Next, we need to create a token that will allow our API calls to be authorized with AWX. Click on Users on the left side of the page. Click on Admin Click on the Tokens tab Click Add In the Scope dropdown select Write and leave the other fields empty. Click Save In the new window that appears copy the token that is displayed and save it in a temporary scratch pad or text file. This is the only time the token will be visible. If you lose it, you will need to generate a new one. For this lab we will keep things simple and use curl to launch our workflow job. Go back to your terminal environment. Let's construct our curl request. Copy and paste the curl command below into a scratch pad or text file so that it is easy to modify. curl -X POST \\ AWX_ROUTE/api/v2/workflow_job_templates/JOB_TEMPLATE_NUMBER/launch/ \\ -H 'Authorization: Bearer AWX_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"extra_vars\": { \"cluster_name\": \"CLUSTER_NAME\" } } ' Replace the following: AWX_ROUTE - This is the address of the link that you clicked on to access AWX. You can find it by going to the OpenShift Console and looking at the route in the awx project. JOB_TEMPLATE_NUMBER - This is the workflow job template number that we got in step 3 above. AWX_TOKEN - This is the personal access token we just created in AWX for the Admin user. CLUSTER_NAME - This is the name of the cluster you were assigned. You can find this on IBM Cloud. Once you have all of the values replaced in your curl command, copy and paste it into your terminal environment and press enter. Return back to AWX in your browser and cilck on the Templates tap on the left. Click on the Provision dev environment workflow job template Click on the Jobs tab. You should now see a job running that was started via API call. Click on the job title to view the job output. Conclusion \u00b6 In this lab we explored how we can use Ansible playbooks to automate environment provisioning and configuration with Ansible and AWX/Ansible Tower. We tried three different methods of running our playbooks: manually using ansible-playbook , launching the jobs in AWX manually, and triggering jobs via API calls.","title":"Cloud Native Infrastructure as Code and Configuration Management"},{"location":"IaC-and-config-management/#cloud-native-infrastructure-as-code-and-configuration-management","text":"In this lab we will be exploring the concepts of Infrastructure as code and configuration management in the scope of cloud native development. Traditionally, infrastructure as code (IaC) mainly referred to provisioning virtual machines across datacenters and cloud providers, however, as we move to a more cloud native strategy involving container orchestration on public clouds, this provisioning process looks different. With the popularity of hosted kubernetes and OpenShift offerings on public clouds, it is easier than ever to provision a platform on which to deploy contianerized applications. In this lab we will walk through the automated provisioning of an OpenShift cluster on IBM Cloud, configuring that cluster with common development tooling, and then finally deploying an application to that cluster. We will be utilizing Ansible to provision and configure our environment as well as the open source project AWX to manage the Ansible playbook runs.","title":"Cloud Native Infrastructure as Code and Configuration Management"},{"location":"IaC-and-config-management/#prerequisites","text":"IBM Cloud Account: Create a free account here","title":"Prerequisites"},{"location":"IaC-and-config-management/#getting-access-to-the-workshop-environment","text":"In this workshop we will be giving you an OpenShift cluster to work on. To access the workshop cluster, follow these steps: Navigate to https://ansible-lab.mybluemix.net and enter you IBM ID (email used to create IBM Cloud account) and the lab password of oslab . After requesting a cluster you should be given a link to take you to the workshop cluster in an IBM Cloud Account. Click on the link. Remember what number cluster you were assigned, we will need this later. We will be using a web terminal environment so that participants can have access to the necessary cli tools without having to install anything. To access this environment, find your assigned number. This should be in the cluster name that you were assigned earlier when you requested a workshop environment. The url to access the terminal environment follows this structure: base url + \"/term\" + assigned number without the leading 0 s The base url for everybody will be: https://oliver-citi-terms-2bef1f4b4097001da9502000c44fc2b2-0000.us-south.containers.appdomain.cloud For example, if I was assigned cluster-030 my url would be https://oliver-citi-terms-2bef1f4b4097001da9502000c44fc2b2-0000.us-south.containers.appdomain.cloud/term30","title":"Getting access to the workshop environment"},{"location":"IaC-and-config-management/#1-setup-the-environment","text":"","title":"1. Setup the environment"},{"location":"IaC-and-config-management/#authenticate-to-your-openshift-cluster","text":"Now let's authenticate with our OpenShift cluster. Navigate to your openshift Cluster in IBM Cloud using the link given to you after requesting a cluster. Click on the cluster listed to be taken to the cluster overview page. Click on the OpenShift web console button to launch the console. From the console, click on the username at the top right of the page and select Copy Login Command Then, click on Display token Next, copy everything in the first box that contains the oc login command. Switch back to your terminal environment and paste in your oc login command. You should now be authenticated and targeting your OpenShift cluster.","title":"Authenticate to your OpenShift cluster"},{"location":"IaC-and-config-management/#get-an-api-key-from-ibm-cloud","text":"Now we need to get an IBM Cloud api key to access our account from the terminal. Go back to your browser tab that is on IBM Cloud. In the top right of the page, select the Manage dropdown, and select Access (IAM) Then select API keys on the left of the page. Click on the Create an IBM Cloud API key button. Name the key awx or whatever you wish. Click create . Then, click on the Copy button to copy the new key. Paste this key in a temporary doc for now or save it in a key manager. We will use this later. It is important that you verify that you have the key somewhere else because once you close the window with the api key, you cannot retrieve it later. If you lose your key you will need to come back and create another one. Switch back to your terminal environment. In your terminal enviroment, create an environment variable to hold your api key export IC_API_KEY = api key here Press enter. This will be used by our ansible playbook.","title":"Get an API key from IBM Cloud"},{"location":"IaC-and-config-management/#cloning-the-repo","text":"In the terminal environment, run the following commands: cd ~ git clone https://github.com/odrodrig/ansible-playbooks.git cd ansible-playbooks/playbooks","title":"Cloning the repo"},{"location":"IaC-and-config-management/#2-running-ansible-playbooks","text":"Now that we are in our terminal environment, let's try running some simple playbooks. Playbooks allow users to script out tasks to be automated. You can run them by calling the ansible-playbook tool. Run the ansible playbook helloWorld by running the following command: ansible-playbook helloWorld.yml -v","title":"2. Running Ansible Playbooks"},{"location":"IaC-and-config-management/#3-installing-awx","text":"From your terminal, run the following commands to install the AWX operator replacing cluster name here with the cluster name that you were assigned: echo \"cluster_name: cluster name here\" > vars.yml ansible-playbook installAWX.yml -v This playbook will do a few things: Get our cluster information from IBM Cloud Authenticate to our cluster using an API key from IBM Cloud Install the AWX operator Create a new project called \"awx\" Create an instance of AWX in our awx project","title":"3. Installing AWX"},{"location":"IaC-and-config-management/#4-configuring-awx","text":"Now that we have AWX installed, let's configure it to manage the running of our playbooks.","title":"4. Configuring AWX"},{"location":"IaC-and-config-management/#accessing-awx","text":"First we need to get our admin password to log into AWX. From your terminal, run the following commands: oc project awx oc get secret awx-admin-password -o jsonpath = \"{.data.password}\" | base64 --decode The password will be output but unfortunately the terminal prompt gets in the way. Copy the password up until the word root as seen below. Next, go back to your OpenShift console, click on Networking on the left side of the page to expand the menu and select Routes Then select the link under the Location column for the awx route. You will then be taken to your AWX login page. The credentials are as follows: username: admin password: { what you copied earlier } Click login to be taken to your AWX dashboard.","title":"Accessing AWX"},{"location":"IaC-and-config-management/#adding-a-project","text":"The first thing we need to do now is import our playbooks into our AWX environment. We can do this by creating a Project and pointing it to a git repository. Navigate to the Projects tab on the left side of the page. Then, click on the blue Add button. Name it ansible-playbooks or whatever you like, and for the Source Control Credential Type dropdown, select Git . In Source Control URL enter the following repo: https://github.com/odrodrig/ansible-playbooks Lastly, select the checkbox labeled 'Update Revision on Launch` Your project should look like the image below. Click Save","title":"Adding a project"},{"location":"IaC-and-config-management/#configuring-job-templates-and-workflow-job-templates","text":"Now that we have imported our playbooks, we need to create job templates for each playbook we want to run. On the left side of the page, select the tab for Templates . Click on Add and select Add job template Configure the template with the values below. For the Inventory and Project fields you will need to click on the magnifying glass to select values.: Name: Create Cluster Inventory: Demo Inventory Project: ansible-playbooks (or whatever you named your project) Playbook: playbooks/create.yml Click Save Create another job template just as you did before with the following values: Name: Install OpenShift GitOps Inventory: Demo Inventory Project: ansible-playbooks Playbook: playbooks/installOpenShiftGitOps.yml Click Save Create one more job template just like before with the following values: Name: Install Compliance Operator Inventory: Demo Inventory Project: ansible-playbooks Playbook: playbooks/installComplianceOperator.yml Click Save Each job template corresponds to a playbook that does one task. If we want to combine multiple jobs into one process, we will need a workflow job template. The workflow that we will be building will create a cluster, install OpenShift GitOps, and lastly install the Compliance Operator. From the Templates menu, click on Add then select Add workflow template Name the workflow template Provision dev environment Then, in the Variables section, paste in the variables below. Be sure to replace {your cluster name here} with your actual cluster name. --- cluster_name : \"{your cluster name here}\" # The variables below are only used if you will be creating a cluster datacenter : \"\" hardware : \"\" kube_version : \"\" public_vlan_id : \"\" private_vlan_id : \"\" default_worker_ppol_size : \"\" entitlement : \"\" Click Save You will then be taken to the workflow visualizer tool that allows us to string together job templates as part of a workflow. Click on the green start button. In the new Add Node window that appears select the Create Cluster job template. Click Save. Now you should see your workflow with one node connected to the Start node. Select the Create Cluster node and click on the plus (+) sign to add a new node. Select the On Success box and click next. Then select the Install OpenShift GitOps job template and click Save . Let's add one more node. Select the Install OpenShift GitOps node and click on the plus (+) sign. Select the On Success box and click next. Then select the Install Compliance Operator job template and click Save . Your workflow should look like the image below: Click on Save at the top right of the workflow visualizer page.","title":"Configuring Job Templates and Workflow Job Templates"},{"location":"IaC-and-config-management/#adding-a-custom-container-group","text":"In our AWX instance, each job run will run in a separate container on our cluster. To configure this we need to create whats known as a Container Group . When we create our container group we will specify what image we want to use for our job runs. Click on the Instance Groups tab on the left side of the page. Then click on the existing container group called tower and click on the Edit button. Select the checkbox under Options labeled Customize pod specification . In the custom pod spec field, overwrite what's there and paste in the following but do not save yet : apiVersion : v1 kind : Pod metadata : namespace : awx spec : containers : - image : docker.io/odrodrig/ibmcloud-ee:0.3 name : worker env : - name : IC_API_KEY value : \"xxx\" args : - ansible-runner - worker In the custom pod spec that was just pasted in, add your IBM Cloud api key to the value property of the IC_API_Key env variable replacing the xxxx . Click Save","title":"Adding a custom container group"},{"location":"IaC-and-config-management/#5-running-jobs-on-awx","text":"Now that our instance of AWX is configured, let's start running these playbooks. In this section we will explore two different ways to run our jobs.","title":"5. Running Jobs on AWX"},{"location":"IaC-and-config-management/#manually-running-a-job","text":"Click on the Templates tab on the left of the page. Find the job template called Install Compliance Operator and click on it. Click on the Edit button. In the job template scroll down to the Variables section and paste the following line in: cluster_name: \"cluster-name\" Replace cluster-name with the cluster name that you were assigned. Scroll down and click Save Now, click on the Launch button to launch a job utilizing this job template. You should now be taken to the output page of the job that we just launched. Wait here until the job completes. While we can launch our jobs and workflow jobs manually from AWX, it would be better if we could set it up so that the jobs could be triggered without needing a human to log into AWX and click the launch button.","title":"Manually running a Job"},{"location":"IaC-and-config-management/#launching-a-job-via-api","text":"One of the benefits of using AWX/Ansible Tower is the ability to launch jobs via API request. This allows you to integrate your workflow runs into other processes. For example, a self serve form to request access to a new OpenShift development environment could trigger a workflow run in AWX. Click on Templates on the left side of the page to go back to the templates page. Select the Provision dev environment workflow job template Go to the address bar of your browser and go to the very end of the address. Look for the number just before /details . This is the workflow job template id and is needed to launch the job from the API. For example, in the partial address below, my workflow job template number is 21. Remember your number. ...us-south.containers.appdomain.cloud/#/templates/workflow_job_template/21/details Next, we need to create a token that will allow our API calls to be authorized with AWX. Click on Users on the left side of the page. Click on Admin Click on the Tokens tab Click Add In the Scope dropdown select Write and leave the other fields empty. Click Save In the new window that appears copy the token that is displayed and save it in a temporary scratch pad or text file. This is the only time the token will be visible. If you lose it, you will need to generate a new one. For this lab we will keep things simple and use curl to launch our workflow job. Go back to your terminal environment. Let's construct our curl request. Copy and paste the curl command below into a scratch pad or text file so that it is easy to modify. curl -X POST \\ AWX_ROUTE/api/v2/workflow_job_templates/JOB_TEMPLATE_NUMBER/launch/ \\ -H 'Authorization: Bearer AWX_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"extra_vars\": { \"cluster_name\": \"CLUSTER_NAME\" } } ' Replace the following: AWX_ROUTE - This is the address of the link that you clicked on to access AWX. You can find it by going to the OpenShift Console and looking at the route in the awx project. JOB_TEMPLATE_NUMBER - This is the workflow job template number that we got in step 3 above. AWX_TOKEN - This is the personal access token we just created in AWX for the Admin user. CLUSTER_NAME - This is the name of the cluster you were assigned. You can find this on IBM Cloud. Once you have all of the values replaced in your curl command, copy and paste it into your terminal environment and press enter. Return back to AWX in your browser and cilck on the Templates tap on the left. Click on the Provision dev environment workflow job template Click on the Jobs tab. You should now see a job running that was started via API call. Click on the job title to view the job output.","title":"Launching a job via API"},{"location":"IaC-and-config-management/#conclusion","text":"In this lab we explored how we can use Ansible playbooks to automate environment provisioning and configuration with Ansible and AWX/Ansible Tower. We tried three different methods of running our playbooks: manually using ansible-playbook , launching the jobs in AWX manually, and triggering jobs via API calls.","title":"Conclusion"},{"location":"pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo 1. Sign up for IBM Cloud \u00b6 Ensure you have an IBM Cloud ID 2. Download or clone the repo \u00b6 Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"Lab 0. Pre-work"},{"location":"pre-work/#pre-work","text":"This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo","title":"Pre-work"},{"location":"pre-work/#1-sign-up-for-ibm-cloud","text":"Ensure you have an IBM Cloud ID","title":"1. Sign up for IBM Cloud"},{"location":"pre-work/#2-download-or-clone-the-repo","text":"Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"2. Download or clone the repo"},{"location":"resources/CONTRIBUTORS/","text":"Contributors \u00b6 Oliver Rodriguez \u00b6 Github: odrodrig Twitter: @heres__ollie","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#contributors","text":"","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#oliver-rodriguez","text":"Github: odrodrig Twitter: @heres__ollie","title":"Oliver Rodriguez"},{"location":"resources/MKDOCS/","text":"mkdocs examples \u00b6 This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation . Code \u00b6 print ( \"hello world!\" ) Code with line numbers \u00b6 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with highlights \u00b6 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with tabs \u00b6 Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } More tabs \u00b6 Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo . Checklists \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst Add a button \u00b6 Launch the lab Visit IBM Developer Sign up! Call outs \u00b6 Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug. Call outs with code \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Formatting \u00b6 In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through Tables \u00b6 OS or Application Username Password Windows VM Administrator foo Linux VM root bar Emojis \u00b6 Yes, these work. Images \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien right align image \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"MkDocs Cheatsheet"},{"location":"resources/MKDOCS/#mkdocs-examples","text":"This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation .","title":"mkdocs examples"},{"location":"resources/MKDOCS/#code","text":"print ( \"hello world!\" )","title":"Code"},{"location":"resources/MKDOCS/#code-with-line-numbers","text":"1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with line numbers"},{"location":"resources/MKDOCS/#code-with-highlights","text":"def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with highlights"},{"location":"resources/MKDOCS/#code-with-tabs","text":"Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Code with tabs"},{"location":"resources/MKDOCS/#more-tabs","text":"Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo .","title":"More tabs"},{"location":"resources/MKDOCS/#checklists","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst","title":"Checklists"},{"location":"resources/MKDOCS/#add-a-button","text":"Launch the lab Visit IBM Developer Sign up!","title":"Add a button"},{"location":"resources/MKDOCS/#call-outs","text":"Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug.","title":"Call outs"},{"location":"resources/MKDOCS/#call-outs-with-code","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Call outs with code"},{"location":"resources/MKDOCS/#formatting","text":"In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through","title":"Formatting"},{"location":"resources/MKDOCS/#tables","text":"OS or Application Username Password Windows VM Administrator foo Linux VM root bar","title":"Tables"},{"location":"resources/MKDOCS/#emojis","text":"Yes, these work.","title":"Emojis"},{"location":"resources/MKDOCS/#images","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"Images"},{"location":"resources/MKDOCS/#right-align-image","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"right align image"}]}